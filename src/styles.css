<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Relevamiento Ambiental Mínimo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
  <style>
    body, html {
      margin: 0; padding: 0;
      height: 100%; font-family: sans-serif;
      background: #f9f9f9;
    }
    #map {
      height: 100vh;
      width: 100vw;
    }
    .formulario {
      position: absolute;
      top: 10px; left: 10px;
      background: white;
      padding: 10px 12px;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      z-index: 1000;
      font-size: 14px;
    }
    .formulario input, .formulario button {
      width: 100%;
      margin-top: 5px;
      padding: 5px;
      font-size: 14px;
      border-radius: 4px;
      border: 1px solid #ccc;
    }
    .leaflet-control-container .leaflet-top.leaflet-right {
      top: 70px;
    }
  </style>
</head>
<body>

<div id="map"></div>

<!-- Formulario -->
<div class="formulario">
  <label>Nombre del punto:</label>
  <input type="text" id="nombre" placeholder="Ej: Basural, Árbol, etc." />
  <button onclick="addMarker()">Agregar Punto</button>
  <button onclick="exportarGeoJSON()">Exportar</button>
</div>

<!-- Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
<script>
  const map = L.map("map").setView([-25.2637, -57.5759], 13);

  // Capa base minimalista
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution: "© OpenStreetMap",
  }).addTo(map);

  let markers = L.featureGroup().addTo(map);

  function addMarker() {
    const nombre = document.getElementById("nombre").value.trim();
    if (!nombre) {
      alert("Ingresá un nombre.");
      return;
    }

    const center = map.getCenter();
    const marker = L.marker(center, { draggable: true }).addTo(markers);
    marker.bindPopup(`<b>${nombre}</b><br><input value="${nombre}" oninput="updateNombre(this, ${marker._leaflet_id})" />`).openPopup();
    marker.feature = {
      type: "Feature",
      properties: { nombre: nombre },
      geometry: {
        type: "Point",
        coordinates: [center.lng, center.lat]
      }
    };

    document.getElementById("nombre").value = "";
  }

  function updateNombre(input, id) {
    const marker = markers.getLayers().find(m => m._leaflet_id === id);
    if (marker && marker.feature) {
      marker.feature.properties.nombre = input.value;
    }
  }

  function exportarGeoJSON() {
    const geojson = {
      type: "FeatureCollection",
      features: markers.getLayers().map(m => {
        const latlng = m.getLatLng();
        return {
          type: "Feature",
          properties: m.feature.properties,
          geometry: {
            type: "Point",
            coordinates: [latlng.lng, latlng.lat],
          }
        };
      }),
    };

    const blob = new Blob([JSON.stringify(geojson, null, 2)], {
      type: "application/json"
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "relevamiento.geojson";
    a.click();
    URL.revokeObjectURL(url);
  }
</script>

</body>
</html>
